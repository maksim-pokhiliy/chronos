generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  password          String
  defaultHourlyRate Float    @default(50)
  currency          String   @default("USD")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  projects    Project[]
  timeEntries TimeEntry[]
  invoices    Invoice[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String        @default("#3B82F6")
  hourlyRate  Float?
  client      String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timeEntries TimeEntry[]
  invoices    Invoice[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  projectId   String
  name        String
  description String?
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeEntries TimeEntry[]

  @@map("tasks")
}

model TimeEntry {
  id          String    @id @default(cuid())
  userId      String
  projectId   String
  taskId      String?
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int       @default(0) // minutes
  isRunning   Boolean   @default(false)
  hourlyRate  Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task     Task?              @relation(fields: [taskId], references: [id], onDelete: SetNull)
  invoices InvoiceTimeEntry[]

  @@map("time_entries")
}

model Invoice {
  id          String        @id @default(cuid())
  userId      String
  projectId   String
  number      String        @unique
  totalHours  Float
  totalAmount Float
  currency    String
  status      InvoiceStatus @default(DRAFT)
  issueDate   DateTime
  dueDate     DateTime
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeEntries InvoiceTimeEntry[]

  @@map("invoices")
}

model InvoiceTimeEntry {
  invoiceId   String
  timeEntryId String

  invoice   Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  timeEntry TimeEntry @relation(fields: [timeEntryId], references: [id], onDelete: Cascade)

  @@id([invoiceId, timeEntryId])
  @@map("invoice_time_entries")
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
}
